name: build
on:
  pull_request:
    branches-ignore: [master]
    types: [opened, reopened, synchronize, labeled]
jobs:
  build-react:
    runs-on: ubuntu-latest    
    if: ${{ contains( github.event.pull_request.labels.*.name, 'TbsReact') }}
    steps:
      - name: 'Checkout repo' 
        uses: actions/checkout@v2
      - name: Setup dotnet
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '5.x'
      - name: Build TbsCore
        run: dotnet build TbsCore/TbsCore.csproj --configuration Release
      - name: Publish TbsReact
        run: dotnet publish TbsReact/TbsReact.csproj /p:PublishProfile=TbsReact/Properties/PublishProfiles/Linux.pubxml
      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-TbsReact-Test
          restore-keys: |
            ${{ runner.os }}-buildx-TbsReact
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: ./TbsReact
          file: ./TbsReact/Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/tbsreact:build
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
  create-compose:
    runs-on: ubuntu-latest
    if: ${{ contains( github.event.pull_request.labels.*.name, 'TbsReact') }}
    steps:
      - name: 'Checkout repo' 
        uses: actions/checkout@v2        
      - name: Create folder
        run: mkdir TbsReact-build      
      - name: Copy docker-compose.yml
        run: cp TbsReact/docker-compose.yml TbsReact-build
      - name: Create .env
        run: |
          cd TbsReact-build
          touch .env
          echo "TAG=build" >> .env
      - name: Upload a Build Artifact
        uses: actions/upload-artifact@v2
        with:
          name: TbsReact-Build
          path: TbsReact-build
          if-no-files-found: error
  build-winform:
    runs-on: windows-latest
    if: ${{ contains( github.event.pull_request.labels.*.name, 'TbsWinform') }}
    steps:
      - name: setup-msbuild
        uses: microsoft/setup-msbuild@v1     
      - name: Setup NuGet
        uses: NuGet/setup-nuget@v1.0.5
      - name: 'Checkout repo' 
        uses: actions/checkout@v2
      - name: Navigate to Workspace
        run: cd $GITHUB_WORKSPACE
      - name: Get cache
        uses: actions/cache@v2
        with:
          path: |
              packages
              TbsCore/obj/project.assets.json
              TbsCore/TbsCore.csproj.nuget.g.targets
              TbsCore/TbsCore.csproj.nuget.g.props.              
          key: ${{ runner.os }}-nuget-${{ hashFiles('TbsCore/packages.lock.json') }}
          restore-keys: |
              ${{ runner.os }}-nuget-
      - name: Restore Packages
        run: |
          nuget restore TbsCore/TbsCore.csproj -PackagesDirectory packages
          nuget restore TravBotSharp/TbsWinForms.csproj -PackagesDirectory packages
      - name: Build Bot
        run: |
          msbuild.exe TravBotSharp.sln /t:TbsWinForms /nologo /nr:false /p:DeleteExistingFiles=True /p:platform="Any CPU" /p:configuration="Release" /m /p:BuildProjectReferences=true /p:BUILD_NUMBER=30.4.1975.0
      - name: Upload a Build Artifact
        uses: actions/upload-artifact@v2
        with:
          name: TbsWinform-Build
          path: TravBotSharp\bin\Release
          if-no-files-found: error
  message:
    runs-on: ubuntu-latest
    needs: [build-react, create-compose, build-winform]
    if: always()
    steps:      
      - name: Comment on PR when success
        uses: actions/github-script@0.3.0
        if: |
          github.event_name == 'pull_request' && success()
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { issue: { number: issue_number }, repo: { owner, repo }  } = context;
            github.issues.createComment({ issue_number, owner, repo, body: "[Tbs Autobuild] Congratulation this commit was built successfully. Check detail [here](https://github.com/Erol444/TravianBotSharp/actions/runs/${{ github.run_id }}?check_suite_focus=true)" });
      - name: Comment on PR when fail
        uses: actions/github-script@0.3.0
        if: |
          github.event_name == 'pull_request' && failure()
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { issue: { number: issue_number }, repo: { owner, repo }  } = context;
            github.issues.createComment({ issue_number, owner, repo, body: "[Tbs Autobuild] There is error while building this commit. Check detail [here](https://github.com/Erol444/TravianBotSharp/actions/runs/${{ github.run_id }}?check_suite_focus=true)" });